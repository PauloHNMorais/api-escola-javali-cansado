// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "./erd.svg"
  theme    = "dark"
  erdDebug = true
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Course {
  id              String          @id @default(cuid())
  name            String
  members         Member[]
  coursesSubjects CourseSubject[]
}

model CourseSubject {
  id        String @id @default(cuid())
  courseId  String
  subjectId String

  course       Course        @relation(fields: [courseId], references: [id])
  subject      Subject       @relation(fields: [subjectId], references: [id])
  subjectItems SubjectItem[]
  messages     Message[]

  @@unique([courseId, subjectId])
}

model Member {
  id         String @id @default(cuid())
  userId     String
  courseId   String
  memberType Int

  course          Course        @relation(fields: [courseId], references: [id])
  user            User          @relation(fields: [userId], references: [id])
  subjectItems    SubjectItem[]
  messagesCreated Message[]
  ownerSubjects   Subject[]

  @@unique([userId, courseId])
}

model Message {
  id              String   @id @default(cuid())
  title           String
  description     String
  priority        Int      @default(0)
  createdAt       DateTime @default(now())
  courseSubjectId String
  memberCreatedId String

  memberCreated Member        @relation(fields: [memberCreatedId], references: [id])
  courseSubject CourseSubject @relation(fields: [courseSubjectId], references: [id])
}

model Subject {
  id            String  @id @default(cuid())
  name          String
  imageURL      String?
  ownerMemberId String

  ownerMember     Member          @relation(fields: [ownerMemberId], references: [id])
  coursesSubjects CourseSubject[]
}

model SubjectItem {
  id                  String    @id @default(cuid())
  createdAt           DateTime  @default(now())
  startDate           DateTime?
  endDate             DateTime?
  itemType            Int
  title               String
  subtitle            String?
  description         String?
  memberCreatedId     String
  parentSubjectItemId String?
  courseSubjectId     String
  url                 String?

  courseSubject        CourseSubject @relation(fields: [courseSubjectId], references: [id])
  memberCreated        Member        @relation(fields: [memberCreatedId], references: [id])
  parentSubjectItem    SubjectItem?  @relation("ParentSubjectItem", fields: [parentSubjectItemId], references: [id])
  childrenSubjectItems SubjectItem[] @relation("ParentSubjectItem")
}

model User {
  id        String   @id @default(cuid())
  firstName String
  lastName  String
  email     String   @unique
  password  String
  members   Member[]
}

model Exam {
  id            String         @id @default(cuid())
  title         String
  description   String?
  examQuestions ExamQuestion[]
}

model ExamQuestion {
  id             String @id @default(cuid())
  questionNumber Int
  description    String
  examId         String

  exam    Exam     @relation(fields: [examId], references: [id])
  answers Answer[]
}

model Answer {
  id             String @id @default(cuid())
  examQuestionId String

  examQuestion ExamQuestion @relation(fields: [examQuestionId], references: [id])
}
